fun longestConsecutiveSequence() {
    val nums = arrayOf(100, 4, 200, 1, 3, 2,99)
    var longestLength = 0
    val map = HashMap<Int, Boolean>()
    for (i in nums) {
        map[i] = false
    }

    for (i in nums) {
        var currentLength = 1
        // forward direction
        var nextNum = i + 1
        while (map.containsKey(nextNum) && map[nextNum] == false) {
            currentLength++
            map[nextNum] = true
            nextNum++
            println("forward: $currentLength -- $nextNum")
        }


        // reverse direction
        var prevNum = i - 1
        while (map.containsKey(prevNum) && map[prevNum] == false){
            currentLength++
            map[prevNum] = true
            prevNum--

            println("reverse: $currentLength -- $prevNum")

        }
        longestLength = maxOf(longestLength,currentLength)

    }
    println("longest: $longestLength")

}


Time and Space complexity O(n)
